// QueryAllDrug 查询所有药品
func QueryAllDrug() []map[string]interface{} {
	var results []map[string]interface{}
	var (
		drug    model.Drug
		acc     model.Account
		medical model.Medical
		inquiry model.Inquiry
	)

	// 查询药品记录，并关联查询患者和医生的账号信息
	err := data.Db.Table(fmt.Sprintf("%s as d", drug.TableName())).Order("d.id desc").
		Select("i.patient, i.appointment_time, i.reserved_phone, i.physician, i.type, i.inquiry_detail, i.is_inquiry, i.is_reception, " +
			"m.diagnostic_description, m.inquiry_video, m.medical_img, d.hospital, d.create_time, d.already_buy, d.delivery_certificate, d.is_receive," +
			"d.id as drug_id," +
			"j.username as patient_username,j.sex as patient_sex,j.age as patient_age, p.username as physician_username").
		Joins(fmt.Sprintf("JOIN %s as m ON d.bind_medical = m.id", medical.TableName())).
		Joins(fmt.Sprintf("JOIN %s as i ON m.bind_inquiry_id = i.id", inquiry.TableName())).
		Joins(fmt.Sprintf("JOIN %s as j ON j.uuid = i.patient", acc.TableName())).
		Joins(fmt.Sprintf("JOIN %s as p ON p.uuid = i.physician", acc.TableName())).
		Scan(&results).Error
	if err != nil {
		return nil
	}
	return results
}

func QueryAllDrug(ctx *gin.Context) {
	res := response.ResponseBuild{}
	drugList := drug.QueryAllDrug()
	res.SetCode(custom_error.SuccessCode).SetMsg("success").SetData(drugList).Build(ctx)
}
// HospitalAgentDrug 审核药品上链
// param: drugId 药品id
func HospitalAgentDrug(drugId string) error {
	// 审核药品上链
	r, e := util.IsSuccessMsg(util.CommonEq(
		"hospitalReviewDrugDelivery", []interface{}{drugId}))
	if !r && e != nil {
		log.Println(e)
		return errors.New("审核上链失败")
	}
	// 修改数据库数据,将is_receive字段设置为true,表示药品已经接收
	if err := UpdateDrugRecord(map[string]interface{}{
		"id": drugId,
	}, map[string]interface{}{
		"is_receive": true,
	}); err != nil {
		log.Println(err)
		return errors.New("修改数据库数据失败")
	}
	return nil
}
